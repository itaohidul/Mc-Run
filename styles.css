const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
canvas.width = 800;
canvas.height = 400;

const gravity = 1.5;
let gameSpeed = 5;
let score = 0;
let highScore = 0;

const player = {
    x: 50,
    y: 150,
    width: 50,
    height: 50,
    speedY: 0,
    jumpPower: -15,
    isJumping: false,
};

const ground = {
    x: 0,
    y: canvas.height - 50,
    width: canvas.width,
    height: 50,
};

let obstacles = [];
const obstacleWidth = 50;
const obstacleMinHeight = 50;
const obstacleMaxHeight = 200;

let frame = 0;
const obstacleFrequency = 90;

function drawPlayer() {
    ctx.fillStyle = 'red';
    ctx.fillRect(player.x, player.y, player.width, player.height);
}

function drawGround() {
    ctx.fillStyle = 'green';
    ctx.fillRect(ground.x, ground.y, ground.width, ground.height);
}

function updatePlayer() {
    player.speedY += gravity;
    player.y += player.speedY;

    if (player.y + player.height > ground.y) {
        player.y = ground.y - player.height;
        player.isJumping = false;
    }
}

function handleObstacles() {
    if (frame % obstacleFrequency === 0) {
        let height = Math.floor(Math.random() * (obstacleMaxHeight - obstacleMinHeight + 1) + obstacleMinHeight);
        obstacles.push({ x: canvas.width, y: ground.y - height, width: obstacleWidth, height: height });
    }

    for (let i = 0; i < obstacles.length; i++) {
        obstacles[i].x -= gameSpeed;

        if (obstacles[i].x + obstacles[i].width < 0) {
            obstacles.splice(i, 1);
            score++;
            if (score > highScore) {
                highScore = score;
            }
        }

        ctx.fillStyle = 'black';
        ctx.fillRect(obstacles[i].x, obstacles[i].y, obstacles[i].width, obstacles[i].height);

        if (player.x < obstacles[i].x + obstacles[i].width &&
            player.x + player.width > obstacles[i].x &&
            player.y < obstacles[i].y + obstacles[i].height &&
            player.y + player.height > obstacles[i].y) {
            // Collision detected
            resetGame();
        }
    }
}

function resetGame() {
    player.y = ground.y - player.height;
    player.speedY = 0;
    player.isJumping = false;
    obstacles = [];
    score = 0;
    frame = 0;
}

function gameLoop() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    updatePlayer();
    drawGround();
    drawPlayer();
    handleObstacles();

    ctx.fillStyle = 'black';
    ctx.font = '20px Arial';
    ctx.fillText('Score: ' + score, 10, 30);
    ctx.fillText('High Score: ' + highScore, 10, 60);

    frame++;
    requestAnimationFrame(gameLoop);
}

canvas.addEventListener('click', () => {
    if (!player.isJumping) {
        player.speedY = player.jumpPower;
        player.isJumping = true;
    }
});

gameLoop();

// Daily Login Bonus Logic
let lastLogin = localStorage.getItem('lastLogin');
let loginStreak = 
